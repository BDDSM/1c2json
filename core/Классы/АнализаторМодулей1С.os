#Использовать ".\internal"

Перем Лог;

Процедура ПриСозданииОбъекта(Настройки)

	Лог = Константы1c2json.ПолучитьЛог();

	КаталогИсходников = Настройки.КаталогИсходников;

КонецПроцедуры

Функция МодульИзФайла(ПолноеИмяФайла) Экспорт

	// ВАЖНО! В OneScript \w содержит в себе [А-Яа-я], т.е. [0-9a-z_А-Яа-я]
	// При тестировании выражений во внешних программах это может не соблюдаться

	ТаблицаМетодов = Новый ТаблицаЗначений;
	ТаблицаМетодов.Колонки.Добавить("ЕстьОписание");
	ТаблицаМетодов.Колонки.Добавить("Ключ");
	ТаблицаМетодов.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("Параметры");
	ТаблицаМетодов.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("Директива", Новый ОписаниеТипов("Строка"));
	ТаблицаМетодов.Колонки.Добавить("Экспорт", Новый ОписаниеТипов("Строка"));
	
	// Получение текста файла
	ТекстДок = Новый ЧтениеТекста();
	ТекстДок.Открыть(ПолноеИмяФайла);
	ТекстФайла = ТекстДок.Прочитать();
	ТекстДок.Закрыть();

	// 1. Поиск всех процедур/функций в файле и добавление в таблицу методов

	// Выражение для поиска только названий процедур/функций.
	// Начинается с "Процедура|Функция (" и заканчивается ") [Экспорт]"
	Выражение = "^\s*(?<type>Процедура|Функция)\s+(?<name>[А-Яа-я\w]+)s*\((?<params>[^)]*)\)\s*(?<export>Экспорт)?";
	РегулярноеВыражение = Новый РегулярноеВыражение(Выражение);
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;

	Совпадения = РегулярноеВыражение.НайтиСовпадения(ТекстФайла);
	Для Каждого Совпадение Из Совпадения Цикл
		ЗаголовокМетода = РазобратьЗаголовок(Совпадение);
		СтрокаМетода = ТаблицаМетодов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМетода, ЗаголовокМетода);
		СтрокаМетода.Ключ = СтрШаблон("%1 %2", НРег(СтрокаМетода.Вид), НРег(СтрокаМетода.Имя));
	КонецЦикла;

	// 2. Поиск всех описаний процедур/функций и поиск/заполнение их в таблице методов

	// Выражение для поиска только описаний. Начинается с "//@Процедура|Функция" и заканчивается
	// последним комментарием (следующая строка не начинается с "//"). На каждой строке должен быть комментарий.
	Выражение = "^\s*\/\/(?:@(?<type>Процедура|Функция))\s+(?<name>[А-Яа-я\w]+)\s*(?<comment>(?:\s*\/\/[^\r\n]*\n)*)";
	РегулярноеВыражение = Новый РегулярноеВыражение(Выражение);
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;

	Совпадения = РегулярноеВыражение.НайтиСовпадения(ТекстФайла);
	Для Каждого Совпадение Из Совпадения Цикл
		РазобратьОписание(ТаблицаМетодов, Совпадение);
	КонецЦикла;

	ОписаниеМодуля = Новый Структура;
	ОписаниеМодуля.Вставить("Методы", ТаблицаМетодов);

	Возврат ОписаниеМодуля;

КонецФункции

Функция ПоискИУдалениеБлокаКомментария(ВесьТекст, Знач ИмяБлока)

	ТекстБлока = "";

	Выражение = "(?:" + ИмяБлока + "\s*[:]?\s*)(?<block>[^\r]*)";
	РегулярноеВыражение = Новый РегулярноеВыражение(Выражение);
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;

	// Получение текста блока из общего текста, если блок есть и последующее удаление его
	Совпадения = РегулярноеВыражение.НайтиСовпадения(ВесьТекст);
	Если Совпадения.Количество() = 1 Тогда
		Если Совпадения[0].Группы.Количество() = 2 Тогда
			ТекстБлока = Совпадения[0].Группы[1].Значение;
			ВесьТекст = РегулярноеВыражение.Заменить(ВесьТекст, "");
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстБлока;

КонецФункции

Функция УдалитьСлешиИзКомментария(ТекстКомментария, ВОднуСтроку = Ложь)

	РегулярноеВыражение = Новый РегулярноеВыражение("(^\s*\/\/\s*)");

	Результат = РегулярноеВыражение.Заменить(ТекстКомментария, "");
	Если ВОднуСтроку Тогда
		Результат  = СтрЗаменить(Результат, Символы.ПС, "");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Заполняет таблицу параметров по тексту параметров из заголовка
// Например, для текста из заголовка "П1, Знач П2 = 0" будет добавлено два параметра 
//
Процедура ЗаполнитьПараметрыПоЗаголовку(ТаблицаПараметров, ТекстИзЗаголовка)

	МассивПараметров = СтрРазделить(ТекстИзЗаголовка, ",", Ложь);
	Для Каждого ТекстПараметра Из МассивПараметров Цикл
		СтрокаПараметра = ТаблицаПараметров.Добавить();
		ТекстПараметра = СокрЛП(ТекстПараметра);
		Если Лев(НРег(ТекстПараметра), 4) = "знач" Тогда
			СтрокаПараметра.ПоЗначению = Истина;
			ТекстПараметра = СокрЛ(Сред(ТекстПараметра, 5));
		Иначе
			СтрокаПараметра.ПоЗначению = Ложь;
		КонецЕсли;
		ПозРавно = СтрНайти(ТекстПараметра, "=");
		Если ПозРавно <> 0 Тогда
			СтрокаПараметра.ПоУмолчанию = СокрЛП(Сред(ТекстПараметра, ПозРавно + 1));
			ТекстПараметра = СокрП(Лев(ТекстПараметра, ПозРавно - 1));
		КонецЕсли;
		СтрокаПараметра.Имя = ТекстПараметра;
	КонецЦикла;

КонецПроцедуры

Функция ЗаменитьПерекрестныеСсылки(ТекстОписания)
	// Ссылка должны быть в формате "@see ОбъектМетаданных"
	Выражение = "(?:@see\s+)(?<object>[А-Яа-я\w.]+)";
	РегулярноеВыражение = Новый РегулярноеВыражение(Выражение);
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;

	Описание = ТекстОписания;
	Пока Истина Цикл
		Совпадения = РегулярноеВыражение.НайтиСовпадения(Описание);
		Если Совпадения.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		Группа = Совпадения[0].Группы[1];
		ОбъектМетаданных = Группа.Значение;
		ОписаниеСсылки = СтрШаблон("[%1](%2)", ОбъектМетаданных, ОбъектМетаданных);
		Описание = РегулярноеВыражение.Заменить(Описание, ОписаниеСсылки);
		//Описание = Лев(Описание, Группа.Индекс - 1) + ОписаниеСсылки + Сред(Описание, Группа.Индекс + Группа.Длина);
	КонецЦикла;

	Возврат Описание;

КонецФункции

Процедура ЗаполнитьПараметрыИзОписания(ТаблицаПараметров, ТекстОписания)

	// Определение параметров в секции "Параметры"
	// Формат параметра "//  <Имя> [: <Тип>] - <Описание>", где
	// 1. Имя - имя параметра. Должен быть отступ в 2 пробела после "//"
	// 2. Тип - описание типа параметра. Необязательное. Определяется по наличию ":" перед "-".
	// 3. Описание - описание параметра. Необязательное. Определется после "-".
	//   При переносе описания параметрам на несколько строк для каждой строки должен быть отступ
	//   не менее 3-х пробелов после "//", иначе это будет восприниматься как новый параметр

	//Выражение = 
	//	"(?:^\s*\/\/[\s]*)" + 
	//	"(?<name>[А-Яа-я\w]+)" + 
	//	"(?:(?:\s*:\s*)(?<type>[^-\n]*))?" +
	//	"(?:\s*-\s*(?<description_start>.))?";
	Выражение = "(?:^\s*\/\/[\s]{2,2})(?<name>[А-Яа-я\w]+)(?:(?:\s*:\s*)(?<type>[^-\n]*))?(?:\s*-\s*(?<description_start>.))?";
	РегулярноеВыражение = Новый РегулярноеВыражение(Выражение);

	ОписаниеПараметра = Новый Структура("Общая,Имя,Тип,Описание");

	ПорядокГрупп = Новый Массив;
	ПорядокГрупп.Добавить("Общая");
	ПорядокГрупп.Добавить("Имя");
	ПорядокГрупп.Добавить("Тип");
	ПорядокГрупп.Добавить("Описание");

	ПараметрыДляСортировки = Новый ТаблицаЗначений;
	ПараметрыДляСортировки.Колонки.Добавить("Имя");
	ПараметрыДляСортировки.Колонки.Добавить("Тип");
	ПараметрыДляСортировки.Колонки.Добавить("ИндексИмя");
	ПараметрыДляСортировки.Колонки.Добавить("ИндексОписание");

	// Сортировка параметров в порядке следования в тексте для определения начала и окончания
	// описания параметров начало - начало первой буквы описания, конец - начало следующего параметра)
	Совпадения = РегулярноеВыражение.НайтиСовпадения(ТекстОписания);
	Для Каждого Совпадение Из Совпадения Цикл
		НомерГруппы = 1;
		Если Совпадение.Группы.Количество() < 4
		 ИЛИ Совпадение.Группы[1].Длина = 0 Тогда
			Лог.Ошибка("Не найдено ни одного параметра в описании: %1", ТекстОписания);
		Иначе
			СтрокаПараметра = ПараметрыДляСортировки.Добавить();
			СтрокаПараметра.Имя = Совпадение.Группы[1].Значение;
			СтрокаПараметра.Тип = Совпадение.Группы[2].Значение;
			СтрокаПараметра.ИндексИмя = Совпадение.Группы[1].Индекс;
			СтрокаПараметра.ИндексОписание = ?(Совпадение.Группы[3].Длина = 0, -1, Совпадение.Группы[3].Индекс);
		КонецЕсли;
	КонецЦикла;
	ПараметрыДляСортировки.Сортировать("ИндексИмя");

	// Заполнение описания найденных параметров
	НомСтроки = 1;
	ВсегоСтрок = ПараметрыДляСортировки.Количество();
	Для Каждого СтрокаИндекса Из ПараметрыДляСортировки Цикл
		СтрокаПараметра = ТаблицаПараметров.Найти(СтрокаИндекса.Имя, "Имя");
		Если СтрокаПараметра = Неопределено Тогда
			ТекстСообщения = СтрШаблон("Не найден параметр ""%1"", указанный в описании", СтрокаИндекса.Имя);
		Иначе
			СтрокаПараметра.Тип = СтрокаИндекса.Тип;
			Если СтрокаИндекса.ИндексОписание <> -1 Тогда
				Если НомСтроки = ВсегоСтрок Тогда
					// Для последнего параметра длина описания не ограничена
					Описание = Сред(ТекстОписания, СтрокаИндекса.ИндексОписание);
				Иначе
					// Описание заканчивается на следующем параметре
					ДлинаОписания = ПараметрыДляСортировки[НомСтроки].ИндексИмя - СтрокаИндекса.ИндексОписание - 1;
					Описание = Сред(ТекстОписания, СтрокаИндекса.ИндексОписание, ДлинаОписания);
				КонецЕсли;
				Описание = УдалитьСлешиИзКомментария(Описание, Истина);
				СтрокаПараметра.Описание = Описание; 
			КонецЕсли;
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
	КонецЦикла;

КонецПроцедуры

Процедура РазобратьОписание(ТаблицаМетодов, Совпадение)

	ПорядокГрупп = Новый Массив;
	ПорядокГрупп.Добавить("Общая");
	ПорядокГрупп.Добавить("Вид");
	ПорядокГрупп.Добавить("Имя");
	ПорядокГрупп.Добавить("Описание");
	
	ОписаниеМетода = Новый Структура("Имя,Вид,Описание");

	// Разложение описания в блоке комментария
	НомерГруппы = 1;
	Для Каждого Группа Из Совпадение.Группы Цикл
		Если НомерГруппы > 1 Тогда
			Если НЕ ПустаяСтрока(Группа.Значение) Тогда
				ИмяГруппы = ПорядокГрупп[НомерГруппы - 1];
				ОписаниеМетода.Вставить(ИмяГруппы, Группа.Значение);
			КонецЕсли;
		КонецЕсли;
		НомерГруппы = НомерГруппы + 1;
	КонецЦикла;

	Ключ = СтрШаблон("%1 %2", НРег(ОписаниеМетода.Вид), НРег(ОписаниеМетода.Имя));
	СтрокаМетода = ТаблицаМетодов.Найти(Ключ, "Ключ");
	Если СтрокаМетода = Неопределено Тогда
		Лог.Ошибка("Найдено не сопоставленное описание ""%1 %2""", ОписаниеМетода.Вид, ОписаниеМетода.Имя);
		Возврат;
	КонецЕсли;
	СтрокаМетода.ЕстьОписание = Истина;

	// Удаление блоков описание от конца к началу. В конце должно остаться только описание.
	БлокОписание = ЗаменитьПерекрестныеСсылки(ОписаниеМетода.Описание);
	
	// Получение описания возвращаемого значения
	Если ОписаниеМетода.Вид = "Функция" Тогда
		ТекстБлока = ПоискИУдалениеБлокаКомментария(БлокОписание, "Возвращаемое значение");
		ТекстБлока = УдалитьСлешиИзКомментария(ТекстБлока, Истина);
		СтрокаМетода.Результат = ТекстБлока;
	КонецЕсли;
	
	// Заполнение таблицы параметров по данным комментария
	ТекстБлока = ПоискИУдалениеБлокаКомментария(БлокОписание, "Параметры");
	ЗаполнитьПараметрыИзОписания(СтрокаМетода.Параметры, ТекстБлока);
	
	СтрокаМетода.Описание = УдалитьСлешиИзКомментария(БлокОписание);

КонецПроцедуры

Функция РазобратьЗаголовок(Совпадение)

	ПорядокГрупп = Новый Массив;
	ПорядокГрупп.Добавить("Общая");
	ПорядокГрупп.Добавить("Вид");
	ПорядокГрупп.Добавить("Имя");
	ПорядокГрупп.Добавить("Параметры");
	ПорядокГрупп.Добавить("Экспорт");
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("Тип", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("ПоЗначению", Новый ОписаниеТипов("Булево"));
	ТаблицаПараметров.Колонки.Добавить("ПоУмолчанию", Новый ОписаниеТипов("Строка"));

	ЗаголовокМетода = Новый Структура("Имя,Вид,Экспорт,Параметры");
	ЗаголовокМетода.Параметры = ТаблицаПараметров;

	НомерГруппы = 1;
	Для Каждого Группа Из Совпадение.Группы Цикл
		Если НомерГруппы > 1 Тогда
			Если НЕ ПустаяСтрока(Группа.Значение) Тогда
				ИмяГруппы = ПорядокГрупп[НомерГруппы - 1];
				Если ИмяГруппы = "Параметры" Тогда
					// Преобразование параметров из заголовка метода в таблицу с учетом "Знач" и значения по-умолчанию
					ЗаполнитьПараметрыПоЗаголовку(ЗаголовокМетода.Параметры, Группа.Значение);
				Иначе
					ЗаголовокМетода.Вставить(ИмяГруппы, Группа.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НомерГруппы = НомерГруппы + 1;
	КонецЦикла;

	Возврат ЗаголовокМетода;

КонецФункции
